Kalshi-Style Prediction Market – Relational Database Schema
=================================================

Overview
--------
This schema is designed for a pseudocurrency trading (event-contract) platform geared towards college students.
Core entities:

* **users** – account details
* **markets** – real-world questions (e.g., “Will Harvard win the 2026 Harvard-Yale game end?”)
* **contracts** – tradeable YES/NO legs inside each market
* **orders** – open interest placed by users
* **trades** – executed matches between opposing orders
* **positions** – net user holdings per contract
* **ideas** – community-submitted suggestions for new markets

All tables are in 3NF, use surrogate BIGSERIAL primary keys, UTC timestamps,
and `ON DELETE` rules that keep historical integrity.

-------------------------------------------------
1.  users
-------------------------------------------------
CREATE TABLE users (
    user_id        BIGSERIAL PRIMARY KEY,
    username       VARCHAR(50)  NOT NULL UNIQUE,
    email          CITEXT       NOT NULL UNIQUE,
    hashed_password TEXT        NOT NULL,
    status         VARCHAR(15)  DEFAULT 'active'
                   CHECK (status IN ('active','suspended','closed')),
    balance  BIGINT       DEFAULT 0,   -- optional wallet balance of pseudocurrency
    created_at     TIMESTAMPTZ  DEFAULT NOW()
);

Indexes:
  • UNIQUE(username)
  • UNIQUE(email)

-------------------------------------------------
2.  markets
-------------------------------------------------
CREATE TABLE markets (
    market_id     BIGSERIAL PRIMARY KEY,
    title         TEXT         NOT NULL,
    description   TEXT,
    category      VARCHAR(50),
    start_time    TIMESTAMPTZ  NOT NULL,     -- trading opens
    close_time    TIMESTAMPTZ  NOT NULL,     -- last moment to trade
    resolve_time  TIMESTAMPTZ,
    status        VARCHAR(12)  DEFAULT 'open'
                  CHECK (status IN ('open','closed','resolved','cancelled')),
    result        VARCHAR(10)  CHECK (result IN ('YES','NO','UNDECIDED'))
);

Indexes:
  • (status, close_time)

-------------------------------------------------
3.  contracts  (YES / NO legs)
-------------------------------------------------
CREATE TABLE contracts (
    contract_id   BIGSERIAL PRIMARY KEY,
    market_id     BIGINT REFERENCES markets(market_id) ON DELETE CASCADE,
    outcome       VARCHAR(20) NOT NULL,        -- e.g., 'YES'
    initial_price NUMERIC(6,4)                 -- 0–1 inclusive
                 CHECK (initial_price BETWEEN 0 AND 1),
    UNIQUE (market_id, outcome)
);

Indexes:
  • (market_id)
  • (market_id, outcome)

-------------------------------------------------
4.  ideas  (community suggestions)
-------------------------------------------------
CREATE TABLE ideas (
    idea_id          BIGSERIAL PRIMARY KEY,
    submitted_by     BIGINT REFERENCES users(user_id) ON DELETE SET NULL,
    title            TEXT        NOT NULL,
    description      TEXT,
    created_at       TIMESTAMPTZ DEFAULT NOW(),
    status           VARCHAR(12) DEFAULT 'pending'
                     CHECK (status IN ('pending','accepted','rejected')),
    linked_market_id BIGINT REFERENCES markets(market_id)
);

-------------------------------------------------
5.  orders  (open interest)
-------------------------------------------------
CREATE TABLE orders (
    order_id        BIGSERIAL PRIMARY KEY,
    user_id         BIGINT REFERENCES users(user_id),
    contract_id     BIGINT REFERENCES contracts(contract_id),
    side            CHAR(4)     NOT NULL CHECK (side IN ('BUY','SELL')),
    order_type      VARCHAR(6)  NOT NULL CHECK (order_type IN ('market','limit')),
    price           NUMERIC(6,4) CHECK (price BETWEEN 0 AND 1),
    quantity        INTEGER     CHECK (quantity > 0),
    filled_quantity INTEGER     DEFAULT 0,
    status          VARCHAR(18) DEFAULT 'open'
                   CHECK (status IN ('open','partially_filled','filled','cancelled')),
    created_at      TIMESTAMPTZ DEFAULT NOW()
);

Indexes:
  • (contract_id, status)
  • (user_id, status)

-------------------------------------------------
6.  trades  (executions)
-------------------------------------------------
CREATE TABLE trades (
    trade_id       BIGSERIAL PRIMARY KEY,
    buy_order_id   BIGINT REFERENCES orders(order_id),
    sell_order_id  BIGINT REFERENCES orders(order_id),
    contract_id    BIGINT REFERENCES contracts(contract_id),
    price          NUMERIC(6,4) NOT NULL,
    quantity       INTEGER      NOT NULL,
    executed_at    TIMESTAMPTZ  DEFAULT NOW()
);

Indexes:
  • (contract_id, executed_at DESC)

-------------------------------------------------
7.  positions  (net holdings)
-------------------------------------------------
CREATE TABLE positions (
    position_id   BIGSERIAL PRIMARY KEY,
    user_id       BIGINT REFERENCES users(user_id),
    contract_id   BIGINT REFERENCES contracts(contract_id),
    quantity      INTEGER      NOT NULL,   -- positive for YES, negative for NO
    avg_price     NUMERIC(6,4) NOT NULL,
    realised_pnl  NUMERIC(14,2) DEFAULT 0,
    updated_at    TIMESTAMPTZ   DEFAULT NOW(),
    UNIQUE (user_id, contract_id)
);

Indexes:
  • (user_id)
  • (contract_id)

-------------------------------------------------
Relationships & Cascades (summary)
-------------------------------------------------
users          1 ── N  orders, ideas, positions
markets        1 ── N  contracts
contracts      1 ── N  orders, trades, positions
orders         1 ── N  trades (via buy/sell IDs)

-------------------------------------------------
Query & Storage Tips
-------------------------------------------------
* Use **numeric(6,4)** for price in \$0–\$1 range (4-dp = 0.0001 granularity).
* Consider **partial indexes** on orders where status='open' for fast matching.
* Partition orders/trades by `executed_at` month or by `contract_id` bucket for
  higher throughput.
* Use **READ COMMITTED** plus row-level locking when matching orders.
* Store daily market snapshot (order-book depth, last price) in a separate
  time-series table if you need charts.

-------------------------------------------------
Example Workflow
-------------------------------------------------
1.  Admin inserts into *markets* & *contracts* when launching a new event.
2.  User places *orders*; a matching engine converts overlapping BUY/SELL into
    *trades* and updates *filled_quantity*.
3.  After each trade, upsert into *positions* to maintain average cost & size.
4.  Upon market resolution, update *markets.result* and compute final P&L from
    *positions* into a **transactions** ledger (not shown).

The schema above is ready for PostgreSQL ≥ 14 (recommended) 